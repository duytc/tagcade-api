services:

    ## Update ad tag html before ad tag persisted
    tagcade_api.event_listener.UpdateAdTagHtmlListener:
        class: Tagcade\Bundle\ApiBundle\EventListener\UpdateAdTagHtmlListener
        tags:
            - { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: preUpdate }

    ## Update ad tag position, make sure its continuous
    tagcade_api.event_listener.UpdateAdTagPositionListener:
        class: Tagcade\Bundle\ApiBundle\EventListener\UpdateAdTagPositionListener
        tags:
            - { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: onFlush }
            - { name: doctrine.event_listener, event: preSoftDelete }

    ## Update expression in js, for tagcache latter
    tagcade_api.event_listener.UpdateExpressionInJstListener:
        class: Tagcade\Bundle\ApiBundle\EventListener\UpdateExpressionInJsListener
        arguments:
            - @tagcade_api.service.expression_in_js_generator
        tags:
            - { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: preUpdate }
            - { name: doctrine.event_listener, event: postFlush }

    tagcade_api.event_listener.MoveAdTagToLibraryListener:
        class: Tagcade\Bundle\ApiBundle\EventListener\MoveAdTagToLibraryListener
        tags:
            - { name: doctrine.event_listener, event: preUpdate }
            - { name: doctrine.event_listener, event: postFlush }

    tagcade_api.event_listener.MoveDynamicAdSlotToLibraryListener:
        class: Tagcade\Bundle\ApiBundle\EventListener\MoveDynamicAdSlotToLibraryListener
        tags:
            - { name: doctrine.event_listener, event: preUpdate }

    tagcade_api.event_listener.ResetStartingPositionListener:
        class: Tagcade\Bundle\ApiBundle\EventListener\ResetStartingPositionListener
        tags:
            - { name: doctrine.event_listener, event: preUpdate, priority: 100 }
            - { name: doctrine.event_listener, event: postSoftDelete }

    tagcade_api.event_listener.UpdateAdTagCountForAdNetworkListener:
        class: Tagcade\Bundle\ApiBundle\EventListener\UpdateAdTagCountForAdNetworkListener
        tags:
            - { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: preUpdate }
            - { name: doctrine.event_listener, event: preSoftDelete }
            - { name: doctrine.event_listener, event: onFlush}
            - { name: doctrine.event_listener, event: postFlush}

    tagcade_api.event_listener.UpdateExistingRonSlotDomainCacheListener:
        class: Tagcade\Bundle\ApiBundle\EventListener\UpdateExistingRonSlotDomainCacheListener
        arguments:
            - @tagcade.cache.configuration_cache
        tags:
            - { name: doctrine.event_listener, event: postPersist }
            - { name: doctrine.event_listener, event: postSoftDelete }

    tagcade_api.event_listener.UpdateExistingRonTagSlotCacheListener:
        class: Tagcade\Bundle\ApiBundle\EventListener\UpdateExistingRonTagSlotCacheListener
        arguments:
            - @tagcade.cache.configuration_cache
        tags:
            - { name: doctrine.event_listener, event: postPersist }
            - { name: doctrine.event_listener, event: postSoftDelete }

    tagcade_api.event_listener.UpdateSiteTokenListener:
        class: Tagcade\Bundle\ApiBundle\EventListener\UpdateSiteTokenListener
        tags:
            - { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: preSoftDelete }
            - { name: doctrine.event_listener, event: preUpdate }

    tagcade_api.event_listener.UpdateDeleteTokenForAdSlotListener:
        class: Tagcade\Bundle\ApiBundle\EventListener\UpdateDeleteTokenForAdSlotListener
        tags:
            - { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: preSoftDelete }
